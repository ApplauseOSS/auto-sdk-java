/*
 *
 * Copyright Â© 2024 Applause App Quality, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.applause.auto.pageobjectmodel.elements;

import com.applause.auto.context.IPageObjectContext;
import com.applause.auto.pageobjectmodel.base.BaseElement;
import com.applause.auto.pageobjectmodel.base.LocatedBy;
import com.applause.auto.pageobjectmodel.factory.LazyWebElement;
import java.util.List;

/**
 * BaseElement subclass representing a SelectList.
 *
 * @see com.applause.auto.pageobjectmodel.base.BaseElement
 */
public class SelectList extends BaseElement {
  /**
   * Basic constructor for a SelectList. SelectLists generally should be generated by
   * PageObjectBuilder.
   *
   * @param element the LazyWebElement underlying this SelectList
   * @param context the web driver
   */
  public SelectList(final LazyWebElement element, final IPageObjectContext context) {
    super(element, context);
  }

  /**
   * Gets the options of this SelectList.
   *
   * @return List of ContainerElements representing the options in the SelectList.
   */
  public List<ContainerElement> getOptions() {
    return this.getChildren(LocatedBy.tagName("option"));
  }

  /**
   * Select a value from this Select List.
   *
   * @param nameToSelect name of the selection to check.
   */
  public void select(final String nameToSelect) {
    if (nameToSelect == null || nameToSelect.isEmpty()) {
      throw new IllegalArgumentException("Empty value passed to SelectList");
    }
    boolean valueFound = false;
    for (ContainerElement option : getOptions()) {
      if (nameToSelect.equalsIgnoreCase(option.getText().trim())) {
        // Found the value in the drop-down, select it
        option.click();
        valueFound = true;
        break;
      }
    }
    if (!valueFound) {
      throw new IllegalStateException("Couldn't find option with name " + nameToSelect);
    }
  }

  /**
   * Gets the currently-selected option of this SelectList. Expects the attribute to be "selected".
   *
   * @return currently-selected option as a ContainerElement. returns null if nothing is selected.
   */
  public ContainerElement getSelectedOption() {
    for (ContainerElement option : getOptions()) {
      boolean isSelected = option.getUnderlying().isSelected();
      if (isSelected) {
        return option;
      }
    }
    return null;
  }
}
