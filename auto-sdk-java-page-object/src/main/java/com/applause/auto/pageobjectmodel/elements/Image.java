/*
 *
 * Copyright Â© 2024 Applause App Quality, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.applause.auto.pageobjectmodel.elements;

import com.applause.auto.context.IPageObjectContext;
import com.applause.auto.pageobjectmodel.base.BaseElement;
import com.applause.auto.pageobjectmodel.factory.LazyWebElement;
import java.util.Optional;
import org.openqa.selenium.Rectangle;
import org.openqa.selenium.UnsupportedCommandException;

/**
 * BaseElement subclass representing an Image.
 *
 * @see com.applause.auto.pageobjectmodel.base.BaseElement
 */
public class Image extends BaseElement {
  /**
   * Basic constructor for an Image. Images generally should be generated by PageObjectBuilder.
   *
   * @param element the LazyWebElement underlying this Image
   * @param context the web driver
   */
  public Image(final LazyWebElement element, final IPageObjectContext context) {
    super(element, context);
  }

  /**
   * Gets the source URL of this Image.
   *
   * @return the href URL for the image source
   */
  public String getImageSrc() {
    return this.underlying.getAttribute("src");
  }

  /**
   * Gets the alt text of this Image.
   *
   * @return the alt text of the image
   */
  public String getImageAltText() {
    return this.underlying.getAttribute("alt");
  }

  /**
   * Gets the height of this Image.
   *
   * @return height of the Image, in pixels
   */
  public int getHeight() {
    try {
      // selenium8/W3C style
      return Optional.ofNullable(this.underlying.getRect())
          .map(Rectangle::getHeight)
          .orElseGet(() -> this.underlying.getSize().getHeight());
    } catch (UnsupportedCommandException ignored) {
      // olderSelenium/JWP style
      return this.underlying.getSize().getHeight();
    }
  }

  /**
   * Gets the width of this Image.
   *
   * @return width of the Image, in pixels
   */
  public int getWidth() {
    try {
      // selenium8/W3C style
      return Optional.ofNullable(this.underlying.getRect())
          .map(Rectangle::getWidth)
          .orElseGet(() -> this.underlying.getSize().getWidth());
    } catch (UnsupportedCommandException ignored) {
      // olderSelenium/JWP style
      return this.underlying.getSize().getWidth();
    }
  }
}
