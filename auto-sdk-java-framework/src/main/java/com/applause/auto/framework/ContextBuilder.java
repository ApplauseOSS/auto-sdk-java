/*
 *
 * Copyright Â© 2024 Applause App Quality, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.applause.auto.framework;

import com.applause.auto.context.FrameworkContext;
import com.applause.auto.context.IContextConnector;
import com.applause.auto.context.IFrameworkExtension;
import com.applause.auto.context.IPageObjectContext;
import com.applause.auto.context.IPageObjectExtension;
import com.applause.auto.context.PageObjectContext;
import com.applause.auto.context.PageObjectOptions;
import com.applause.auto.templates.TemplateManager;
import java.util.function.Function;
import lombok.NonNull;

/** Class used to build a new Framework Context */
public final class ContextBuilder {
  private final FrameworkContext context;

  /** Sets up a ContextBuilder for a Driverless context. */
  private ContextBuilder() {
    this.context = new FrameworkContext(ContextManager.INSTANCE.getOutputPathTemplate());
    for (final var extension :
        ContextManager.INSTANCE.getFrameworkExtensionSuppliers().entrySet()) {
      this.context.registerFrameworkExtension(extension.getKey(), extension.getValue());
    }
    for (final var extension :
        ContextManager.INSTANCE.getPageObjectExtensionSuppliers().entrySet()) {
      this.context.registerPageObjectExtension(extension.getKey(), extension.getValue());
    }
  }

  /**
   * Sets up a new context builder
   *
   * @return the new context builder
   */
  public static ContextBuilder setup() {
    return new ContextBuilder();
  }

  /**
   * Sets the page object context of the framework context
   *
   * @param pageObjectContext The page object context information
   * @return The ContextBuilder
   */
  public ContextBuilder setPageObjectContext(final @NonNull PageObjectContext pageObjectContext) {
    context.setPageObjectContext(pageObjectContext);
    return this;
  }

  /**
   * Sets a reference to the external context object
   *
   * @param contextConnector The external context
   * @return The ContextBuilder
   */
  public ContextBuilder setConnector(final @NonNull IContextConnector<?> contextConnector) {
    context.setConnector(contextConnector);
    return this;
  }

  /**
   * Adds a new extension to the context
   *
   * @param <T> the type of the context extension
   * @param clazz The class to register
   * @param extensionInitializer A function to produce the extension using the current context
   * @return The ContextBuilder
   */
  public <T extends IFrameworkExtension> ContextBuilder registerFrameworkExtension(
      final Class<T> clazz, final Function<FrameworkContext, T> extensionInitializer) {
    context.registerFrameworkExtension(clazz, extensionInitializer);
    return this;
  }

  /**
   * Adds a new extension to the context
   *
   * @param <T> the type of the context extension
   * @param clazz The class to register
   * @param extensionInitializer A function to produce the extension using the current page object
   *     context
   * @return The ContextBuilder
   */
  public <T extends IPageObjectExtension> ContextBuilder registerPageObjectExtension(
      final Class<T> clazz, final Function<IPageObjectContext, T> extensionInitializer) {
    context.registerPageObjectExtension(clazz, extensionInitializer);
    return this;
  }

  /**
   * Sets the output path for resources generated by this Context
   *
   * @param outputPath The output path
   * @return The ContextBuilder
   * @throws TemplateManager.TemplateGenerationException If the output path is not a valid template
   */
  public ContextBuilder setOutputPath(final @NonNull String outputPath)
      throws TemplateManager.TemplateGenerationException {
    context.setOutputPathTemplate(outputPath);
    return this;
  }

  /**
   * Gets the generated context without registering it to the framework
   *
   * @return The generated framework context
   */
  public FrameworkContext get() {
    return this.context;
  }

  /**
   * Gets the context and registers it as the main context for the current thread. if used when
   * there is already an existing context on the thread, this can cause unexpected behaviour with
   * test failures and missing assets
   *
   * @return The framework context that has been registered
   */
  public FrameworkContext getAsMainContext() {
    ContextManager.INSTANCE.overrideContext(context);
    this.context
        .getPageObjectContext()
        .map(IPageObjectContext::getDriver)
        .ifPresent(ContextManager.INSTANCE::registerDriverToCurrentContext);
    return this.context;
  }

  /**
   * Sets up a new ContextBuilder from a DriverBuilder
   *
   * @param builder The DriverBuilder
   * @return The new ContextBuilder
   */
  public static ContextBuilder fromDriver(final @NonNull DriverBuilder builder) {
    return fromDriver(
        builder,
        PageObjectOptions.builder()
            .timeout(ContextManager.INSTANCE.getDefaultTimeout())
            .pollingInterval(ContextManager.INSTANCE.getDefaultPollingInterval())
            .build());
  }

  /**
   * Sets up a new ContextBuilder from a DriverBuilder
   *
   * @param builder The DriverBuilder
   * @param options The PageObjectOptions
   * @return The new ContextBuilder
   */
  public static ContextBuilder fromDriver(
      final @NonNull DriverBuilder builder, final @NonNull PageObjectOptions options) {
    PageObjectContext poc =
        new PageObjectContext(
            builder.buildAndRegister(ContextManager.INSTANCE.getDriverManager()),
            builder.getCaps().getApplauseOptions().getDriverType(),
            builder.getCaps().getApplauseOptions().getFactoryKey(),
            options);
    return setup().setPageObjectContext(poc);
  }
}
